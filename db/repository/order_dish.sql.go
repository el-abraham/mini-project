// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order_dish.sql

package repository

import (
	"context"
)

type CreateOrderDishParams struct {
	OrderID  int64 `json:"order_id"`
	DishID   int64 `json:"dish_id"`
	Quantity int32 `json:"quantity"`
	Price    int64 `json:"price"`
}

const deleteOrderDish = `-- name: DeleteOrderDish :exec
DELETE FROM order_dish
WHERE id = $1
`

func (q *Queries) DeleteOrderDish(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteOrderDish, id)
	return err
}

const getOrderDetail = `-- name: GetOrderDetail :many
SELECT order_dish.id, order_dish.order_id, order_dish.dish_id, order_dish.quantity, order_dish.price, dishes.id, dishes.name, dishes.picture, dishes.price, dishes.created_at, dishes.updated_at, dishes.deleted_at FROM order_dish
JOIN dishes ON order_dish.dish_id = dishes.id
WHERE order_id = $1
`

type GetOrderDetailRow struct {
	ID       int64 `json:"id"`
	OrderID  int64 `json:"order_id"`
	DishID   int64 `json:"dish_id"`
	Quantity int32 `json:"quantity"`
	Price    int64 `json:"price"`
	Dish     Dish  `json:"dish"`
}

func (q *Queries) GetOrderDetail(ctx context.Context, orderID int64) ([]GetOrderDetailRow, error) {
	rows, err := q.db.Query(ctx, getOrderDetail, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderDetailRow
	for rows.Next() {
		var i GetOrderDetailRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.DishID,
			&i.Quantity,
			&i.Price,
			&i.Dish.ID,
			&i.Dish.Name,
			&i.Dish.Picture,
			&i.Dish.Price,
			&i.Dish.CreatedAt,
			&i.Dish.UpdatedAt,
			&i.Dish.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderDish = `-- name: GetOrderDish :one
SELECT id, order_id, dish_id, quantity, price FROM order_dish
WHERE id = $1
`

func (q *Queries) GetOrderDish(ctx context.Context, id int64) (OrderDish, error) {
	row := q.db.QueryRow(ctx, getOrderDish, id)
	var i OrderDish
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.DishID,
		&i.Quantity,
		&i.Price,
	)
	return i, err
}

const updateOrderDish = `-- name: UpdateOrderDish :exec
UPDATE order_dish
SET quantity = $2, price = $3
WHERE id = $1
RETURNING id, order_id, dish_id, quantity, price
`

type UpdateOrderDishParams struct {
	ID       int64 `json:"id"`
	Quantity int32 `json:"quantity"`
	Price    int64 `json:"price"`
}

func (q *Queries) UpdateOrderDish(ctx context.Context, arg UpdateOrderDishParams) error {
	_, err := q.db.Exec(ctx, updateOrderDish, arg.ID, arg.Quantity, arg.Price)
	return err
}
