// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: order.sql

package repository

import (
	"context"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (total_price)
VALUES ($1)
RETURNING id, total_price, created_at, updated_at
`

func (q *Queries) CreateOrder(ctx context.Context, totalPrice int64) (Order, error) {
	row := q.db.QueryRow(ctx, createOrder, totalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrder = `-- name: GetOrder :one
SELECT id, total_price, created_at, updated_at FROM orders
WHERE id = $1
`

func (q *Queries) GetOrder(ctx context.Context, id int64) (Order, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT id, total_price, created_at, updated_at FROM orders
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.Query(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.TotalPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const softDeleteOrder = `-- name: SoftDeleteOrder :exec
UPDATE orders
SET deleted_at = EXTRACT(EPOCH FROM NOW())::BIGINT
WHERE id = $1
`

func (q *Queries) SoftDeleteOrder(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, softDeleteOrder, id)
	return err
}

const updateOrder = `-- name: UpdateOrder :one
UPDATE orders
SET total_price = $2, updated_at = EXTRACT(EPOCH FROM NOW())::BIGINT
WHERE id = $1
RETURNING id, total_price, created_at, updated_at
`

type UpdateOrderParams struct {
	ID         int64 `json:"id"`
	TotalPrice int64 `json:"total_price"`
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) (Order, error) {
	row := q.db.QueryRow(ctx, updateOrder, arg.ID, arg.TotalPrice)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.TotalPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
